@use "sass:map";
@use 'functions' as *;


// --- Generate CSS Custom Properties
// Ex: 
// INPUT
//    $prefix: 'color'
//    $properties: (
//        'light': #f3f3f3,
//        'dark': #1a1a1a
//        )
// OUTPUT: 
//    --color-light: #f3f3f3;
//    --color-dark: #1a1a1a;
@mixin generate-custom-properties($prefix, $properties) {
  @each $name, $value in $properties {
    --#{$prefix}-#{$name}: #{$value};
  }
}

// --- Generate Utility Classes
// INPUT
//    $config: (
//    'color': (
//        'items': (
//          'light': #f3f3f3,
//          'dark': #1a1a1a
//        ),
//        'property': 'color'
//      ),
//    'weight': (
//        ...
//      ),
//    )
// OUTPUT
// .color-light {
//    color: #f3f3f3;
// }
// ...
@mixin generate-utility-classes($config) {
  @each $property-key, $property-config in $config {
    $css-property-name: map.get($property-config, 'property');
    $items: map.get($property-config, 'items');

    @each $item-name, $item-value in $items {
      .#{$property-key}-#{$item-name} {
        #{$css-property-name}: $item-value;
      }
    }
  }
}

// --------Generate CSS Custom Properties for themes------------------------------------------------------------
// --- Apply themes
// This mixin iterates through all defined themes and applies their CSS Custom Properties.
// It sets the 'light' theme as default, handles 'dark' via system preference,
// and allows explicit switching for all themes via 'data-theme' attributes.
// $themes-map: The main $themes map from _theme-definitions.scss
@mixin apply-themes($themes-map) {
  // 1. Apply the 'light' theme as the default to :root.
  // This ensures a baseline theme is always present.
  :root {
    @include generate-custom-properties('color', map.get($themes-map, 'light'));
  }

  // 2. Loop through all themes and generate their styles scoped by data-theme attribute.
  // This allows explicit theme selection via JavaScript.
  @each $theme-name, $theme-colors in $themes-map {
    // For each theme, create a selector like html[data-theme='dark'] or html[data-theme='custom']
    html[data-theme='#{$theme-name}'] {
      @include generate-custom-properties('color', $theme-colors);
    }
  }

  // 3. Apply the 'dark' theme based on system preference.
  // This rule is less specific than `html[data-theme='dark']` but more specific than `:root`.
  // The `:not([data-theme])` ensures it only applies if no explicit data-theme is set,
  // allowing manual toggles to override system preference.
  @media (prefers-color-scheme: dark) {
    html:not([data-theme]) {
      @include generate-custom-properties('color', map.get($themes-map, 'dark'));
    }
  }
}



// --------Media/Container query ------------------------------------------------------------

// Breakpoints
$breakpoints: (
  "small": to-em(480),
  "medium": to-em(768),
  "large": to-em(1024),
  "xlarge": to-em(1280),
  "xxlarge": to-em(1440)
);

// overlap tolerance
$operator-tolerance: (
    "min-width": 0,
    "max-width": to-em(1),
    "min-height": 0,
    "max-height": to-em(1),
  );

/// Common query mixin (for single-boundary queries)
/// @param {String} $query-type - 'media' or 'container'
/// @param {String} $breakpoint - The name of the breakpoint (e.g., 'medium', 'large')
/// @param {String} $operator - The type of media query (e.g., 'min-width', 'max-width', 'only screen and')
/// @requires $breakpoints map
@mixin query($query-type: 'media', $breakpoint, $operator: 'min-width') {
  
  @if not map.has-key($breakpoints, $breakpoint) {
    @warn "Breakpoint '#{$breakpoint}' not found in $breakpoints map.";
  }

  @if not map.has-key($operator-tolerance, $operator) {
    @warn "Operator '#{$breakpoint}' not found in $operator-tolerance map.";
  }

  $breakpoint-value: map.get($breakpoints, $breakpoint);
  $tolerance-value: map.get($operator-tolerance, $operator);

  @if $query-type == '' {
    @media (#{$operator}: #{($breakpoint-value - $tolerance-value)}) {
      @content;
    }
  } @else {
    @container (#{$operator}: #{($breakpoint-value - $tolerance-value)}) {
      @content;
    }
  }
}

// ----- Media query
@mixin mq-up($breakpoint) {
  @include query('media', $breakpoint, 'min-width') {
    @content;
  }
}
@mixin mq-down($breakpoint) {
  @include query('media', $breakpoint, 'max-width') {
    @content;
  }
}
@mixin mq-range($min-breakpoint, $max-breakpoint) {
  @if map.has-key($breakpoints, $min-breakpoint) and map.has-key($breakpoints, $max-breakpoint) {
    $min-bp-value: map.get($breakpoints, $min-breakpoint);
    $max-bp-value: map.get($breakpoints, $max-breakpoint) - map.get($operator-tolerance, 'max-width');

    // Ensure min is not greater than max (or equal if you don't want empty ranges)
    @if $min-bp-value < $max-bp-value {
      @media screen and (min-width: #{$min-bp-value}) and (max-width: #{$max-bp-value}) {
        @content;
      }
    } @else {
      @warn "Invalid range: #{$min-breakpoint} (min: #{$min-bp-value}) is not less than #{$max-breakpoint} (max: #{$max-bp-value}).";
    }
  } @else {
    @warn "Missing '#{$min-breakpoint}' or '#{$max-breakpoint}' breakpoint in $breakpoints map for 'mq-range' mixin.";
  }
}

// ----- Container query
@mixin cq-up($breakpoint) {
  @include query('container', $breakpoint, 'min-width') {
    @content;
  }
}
@mixin cq-down($breakpoint) {
  @include query('container', $breakpoint, 'max-width') {
    @content;
  }
}
@mixin cq-range($min-breakpoint, $max-breakpoint) {
  @if map.has-key($breakpoints, $min-breakpoint) and map.has-key($breakpoints, $max-breakpoint) {
    $min-bp-value: map.get($breakpoints, $min-breakpoint);
    $max-bp-value: map.get($breakpoints, $max-breakpoint) - map.get($operator-tolerance, 'max-width');

    // Ensure min is not greater than max (or equal if you don't want empty ranges)
    @if $min-bp-value < $max-bp-value {
      @container (min-width: #{$min-bp-value}) and (max-width: #{$max-bp-value}) {
        @content;
      }
    } @else {
      @warn "Invalid range: #{$min-breakpoint} (min: #{$min-bp-value}) is not less than #{$max-breakpoint} (max: #{$max-bp-value}).";
    }
  } @else {
    @warn "Missing '#{$min-breakpoint}' or '#{$max-breakpoint}' breakpoint in $breakpoints map for 'mq-range' mixin.";
  }
}
